//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  /// This `R.color` struct is generated, and contains static references to 4 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")
    /// Color `gary_7c`.
    static let gary_7c = Rswift.ColorResource(bundle: R.hostingBundle, name: "gary_7c")
    /// Color `gary_backgroud`.
    static let gary_backgroud = Rswift.ColorResource(bundle: R.hostingBundle, name: "gary_backgroud")
    /// Color `title_color`.
    static let title_color = Rswift.ColorResource(bundle: R.hostingBundle, name: "title_color")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "gary_7c", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func gary_7c(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.gary_7c, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "gary_backgroud", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func gary_backgroud(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.gary_backgroud, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "title_color", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func title_color(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.title_color, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 284 images.
  struct image {
    /// Image `AAAABVkM-ulGr_gThawtcVRuzwTKcDZKnQqA3NlNKcyUIIGbENO_21vbytddHkF2t7v3HvPYn61QGkMq6YylNBJYovucFZMu`.
    static let aaaabVkMUlGr_gThawtcVRuzwTKcDZKnQqA3NlNKcyUIIGbENO_21vbytddHkF2t7v3HvPYn61QGkMq6YylNBJYovucFZMu = Rswift.ImageResource(bundle: R.hostingBundle, name: "AAAABVkM-ulGr_gThawtcVRuzwTKcDZKnQqA3NlNKcyUIIGbENO_21vbytddHkF2t7v3HvPYn61QGkMq6YylNBJYovucFZMu")
    /// Image `AAAABWfkXOppl5bD4CtdvUI5rNwg4VILJSlg06QBE2poJywxTeN5WApCbWM8mvXGYmnsKXwQFeom8dCUb4hcMgLnKA5F0kd5_CNz6N0g64WKUwcGaxJ6Nu1pZg1g1OkEpg`.
    static let aaaabWfkXOppl5bD4CtdvUI5rNwg4VILJSlg06QBE2poJywxTeN5WApCbWM8mvXGYmnsKXwQFeom8dCUb4hcMgLnKA5F0kd5_CNz6N0g64WKUwcGaxJ6Nu1pZg1g1OkEpg = Rswift.ImageResource(bundle: R.hostingBundle, name: "AAAABWfkXOppl5bD4CtdvUI5rNwg4VILJSlg06QBE2poJywxTeN5WApCbWM8mvXGYmnsKXwQFeom8dCUb4hcMgLnKA5F0kd5_CNz6N0g64WKUwcGaxJ6Nu1pZg1g1OkEpg")
    /// Image `AAAABXgINpvuddWaUorT6s4uSzfsnk_5qjizdgB7ALcNfW1AT3r5kgNCbv_CC3WrhKpcTUBqUxKY-b7kABBS476VKOMdkVLYG316teeLrUna00-Qu0gWAkyWQ8CH0ovSOw`.
    static let aaaabXgINpvuddWaUorT6s4uSzfsnk_5qjizdgB7ALcNfW1AT3r5kgNCbv_CC3WrhKpcTUBqUxKYB7kABBS476VKOMdkVLYG316teeLrUna00Qu0gWAkyWQ8CH0ovSOw = Rswift.ImageResource(bundle: R.hostingBundle, name: "AAAABXgINpvuddWaUorT6s4uSzfsnk_5qjizdgB7ALcNfW1AT3r5kgNCbv_CC3WrhKpcTUBqUxKY-b7kABBS476VKOMdkVLYG316teeLrUna00-Qu0gWAkyWQ8CH0ovSOw")
    /// Image `AAAABXi4g4FuCHyaTncsQIHZxhLHiKDmvexTAJs1bQOyyUqZ0tL8dcL219f5CNazn0QRIfScRyM1OUqiVKa_dpJeET9j4PR-NJ11dao5-ja3Wz4fMl7emJEpTTgEVXS-9g`.
    static let aaaabXi4g4FuCHyaTncsQIHZxhLHiKDmvexTAJs1bQOyyUqZ0tL8dcL219f5CNazn0QRIfScRyM1OUqiVKa_dpJeET9j4PRNJ11dao5Ja3Wz4fMl7emJEpTTgEVXS9g = Rswift.ImageResource(bundle: R.hostingBundle, name: "AAAABXi4g4FuCHyaTncsQIHZxhLHiKDmvexTAJs1bQOyyUqZ0tL8dcL219f5CNazn0QRIfScRyM1OUqiVKa_dpJeET9j4PR-NJ11dao5-ja3Wz4fMl7emJEpTTgEVXS-9g")
    /// Image `AAAABYxYBWK_PYKLGtS5UzGIZoR3ZH5eFM1eRVozbok7fzltsAnZVAubb9y9kYisSA8-K9uyvn-FXUTer7JIo7psgeRexPh1xKTMBNnEIIWDHEABMT7wLkgE6Ez5RzUYFA-1`.
    static let aaaabYxYBWK_PYKLGtS5UzGIZoR3ZH5eFM1eRVozbok7fzltsAnZVAubb9y9kYisSA8K9uyvnFXUTer7JIo7psgeRexPh1xKTMBNnEIIWDHEABMT7wLkgE6Ez5RzUYFA1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "AAAABYxYBWK_PYKLGtS5UzGIZoR3ZH5eFM1eRVozbok7fzltsAnZVAubb9y9kYisSA8-K9uyvn-FXUTer7JIo7psgeRexPh1xKTMBNnEIIWDHEABMT7wLkgE6Ez5RzUYFA-1")
    /// Image `BLM_icon`.
    static let blm_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "BLM_icon")
    /// Image `BR-Ratings-10`.
    static let brRatings10 = Rswift.ImageResource(bundle: R.hostingBundle, name: "BR-Ratings-10")
    /// Image `BR-Ratings-12`.
    static let brRatings12 = Rswift.ImageResource(bundle: R.hostingBundle, name: "BR-Ratings-12")
    /// Image `BR-Ratings-14`.
    static let brRatings14 = Rswift.ImageResource(bundle: R.hostingBundle, name: "BR-Ratings-14")
    /// Image `BR-Ratings-16`.
    static let brRatings16 = Rswift.ImageResource(bundle: R.hostingBundle, name: "BR-Ratings-16")
    /// Image `BR-Ratings-18`.
    static let brRatings18 = Rswift.ImageResource(bundle: R.hostingBundle, name: "BR-Ratings-18")
    /// Image `BR-Ratings-L`.
    static let brRatingsL = Rswift.ImageResource(bundle: R.hostingBundle, name: "BR-Ratings-L")
    /// Image `CDPBackground_blue`.
    static let cdpBackground_blue = Rswift.ImageResource(bundle: R.hostingBundle, name: "CDPBackground_blue")
    /// Image `CDPBackground_green`.
    static let cdpBackground_green = Rswift.ImageResource(bundle: R.hostingBundle, name: "CDPBackground_green")
    /// Image `CDPBackground_orange`.
    static let cdpBackground_orange = Rswift.ImageResource(bundle: R.hostingBundle, name: "CDPBackground_orange")
    /// Image `CDPBackground_purple`.
    static let cdpBackground_purple = Rswift.ImageResource(bundle: R.hostingBundle, name: "CDPBackground_purple")
    /// Image `CDPBackground_yellow`.
    static let cdpBackground_yellow = Rswift.ImageResource(bundle: R.hostingBundle, name: "CDPBackground_yellow")
    /// Image `CDPBackground`.
    static let cdpBackground = Rswift.ImageResource(bundle: R.hostingBundle, name: "CDPBackground")
    /// Image `Check_Icon`.
    static let check_Icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "Check_Icon")
    /// Image `CopyLinkIcon`.
    static let copyLinkIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "CopyLinkIcon")
    /// Image `CornerGradientLeft`.
    static let cornerGradientLeft = Rswift.ImageResource(bundle: R.hostingBundle, name: "CornerGradientLeft")
    /// Image `CornerGradientRight`.
    static let cornerGradientRight = Rswift.ImageResource(bundle: R.hostingBundle, name: "CornerGradientRight")
    /// Image `DP-backgroundp-gradient`.
    static let dpBackgroundpGradient = Rswift.ImageResource(bundle: R.hostingBundle, name: "DP-backgroundp-gradient")
    /// Image `DefaultBoxShot`.
    static let defaultBoxShot = Rswift.ImageResource(bundle: R.hostingBundle, name: "DefaultBoxShot")
    /// Image `Dolby Vision`.
    static let dolbyVision = Rswift.ImageResource(bundle: R.hostingBundle, name: "Dolby Vision")
    /// Image `FacebookAppIcon`.
    static let facebookAppIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "FacebookAppIcon")
    /// Image `Follow_Icon`.
    static let follow_Icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "Follow_Icon")
    /// Image `GB-Ratings-12A`.
    static let gbRatings12A = Rswift.ImageResource(bundle: R.hostingBundle, name: "GB-Ratings-12A")
    /// Image `GB-Ratings-12`.
    static let gbRatings12 = Rswift.ImageResource(bundle: R.hostingBundle, name: "GB-Ratings-12")
    /// Image `GB-Ratings-15`.
    static let gbRatings15 = Rswift.ImageResource(bundle: R.hostingBundle, name: "GB-Ratings-15")
    /// Image `GB-Ratings-18`.
    static let gbRatings18 = Rswift.ImageResource(bundle: R.hostingBundle, name: "GB-Ratings-18")
    /// Image `GB-Ratings-AV`.
    static let gbRatingsAV = Rswift.ImageResource(bundle: R.hostingBundle, name: "GB-Ratings-AV")
    /// Image `GB-Ratings-PG`.
    static let gbRatingsPG = Rswift.ImageResource(bundle: R.hostingBundle, name: "GB-Ratings-PG")
    /// Image `GB-Ratings-R18`.
    static let gbRatingsR18 = Rswift.ImageResource(bundle: R.hostingBundle, name: "GB-Ratings-R18")
    /// Image `GB-Ratings-U`.
    static let gbRatingsU = Rswift.ImageResource(bundle: R.hostingBundle, name: "GB-Ratings-U")
    /// Image `GB-Ratings-Uc`.
    static let gbRatingsUc = Rswift.ImageResource(bundle: R.hostingBundle, name: "GB-Ratings-Uc")
    /// Image `HDR`.
    static let hdR = Rswift.ImageResource(bundle: R.hostingBundle, name: "HDR")
    /// Image `HD`.
    static let hD = Rswift.ImageResource(bundle: R.hostingBundle, name: "HD")
    /// Image `Header_Gradient`.
    static let header_Gradient = Rswift.ImageResource(bundle: R.hostingBundle, name: "Header_Gradient")
    /// Image `HeroGradient`.
    static let heroGradient = Rswift.ImageResource(bundle: R.hostingBundle, name: "HeroGradient")
    /// Image `HideKeyboard`.
    static let hideKeyboard = Rswift.ImageResource(bundle: R.hostingBundle, name: "HideKeyboard")
    /// Image `InstagramAppIcon`.
    static let instagramAppIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "InstagramAppIcon")
    /// Image `KMRB-Advisories-drugs`.
    static let kmrbAdvisoriesDrugs = Rswift.ImageResource(bundle: R.hostingBundle, name: "KMRB-Advisories-drugs")
    /// Image `KMRB-Advisories-fear`.
    static let kmrbAdvisoriesFear = Rswift.ImageResource(bundle: R.hostingBundle, name: "KMRB-Advisories-fear")
    /// Image `KMRB-Advisories-harmful-themes`.
    static let kmrbAdvisoriesHarmfulThemes = Rswift.ImageResource(bundle: R.hostingBundle, name: "KMRB-Advisories-harmful-themes")
    /// Image `KMRB-Advisories-imitable-behaviors`.
    static let kmrbAdvisoriesImitableBehaviors = Rswift.ImageResource(bundle: R.hostingBundle, name: "KMRB-Advisories-imitable-behaviors")
    /// Image `KMRB-Advisories-lewdness`.
    static let kmrbAdvisoriesLewdness = Rswift.ImageResource(bundle: R.hostingBundle, name: "KMRB-Advisories-lewdness")
    /// Image `KMRB-Advisories-profanity`.
    static let kmrbAdvisoriesProfanity = Rswift.ImageResource(bundle: R.hostingBundle, name: "KMRB-Advisories-profanity")
    /// Image `KMRB-Advisories-violence`.
    static let kmrbAdvisoriesViolence = Rswift.ImageResource(bundle: R.hostingBundle, name: "KMRB-Advisories-violence")
    /// Image `KMRB-Ratings-Big-12`.
    static let kmrbRatingsBig12 = Rswift.ImageResource(bundle: R.hostingBundle, name: "KMRB-Ratings-Big-12")
    /// Image `KMRB-Ratings-Big-15`.
    static let kmrbRatingsBig15 = Rswift.ImageResource(bundle: R.hostingBundle, name: "KMRB-Ratings-Big-15")
    /// Image `KMRB-Ratings-Big-18`.
    static let kmrbRatingsBig18 = Rswift.ImageResource(bundle: R.hostingBundle, name: "KMRB-Ratings-Big-18")
    /// Image `KMRB-Ratings-Big-All`.
    static let kmrbRatingsBigAll = Rswift.ImageResource(bundle: R.hostingBundle, name: "KMRB-Ratings-Big-All")
    /// Image `KMRB-Ratings-Big-Restricted Screening`.
    static let kmrbRatingsBigRestrictedScreening = Rswift.ImageResource(bundle: R.hostingBundle, name: "KMRB-Ratings-Big-Restricted Screening")
    /// Image `KMRB-Ratings-Small-12`.
    static let kmrbRatingsSmall12 = Rswift.ImageResource(bundle: R.hostingBundle, name: "KMRB-Ratings-Small-12")
    /// Image `KMRB-Ratings-Small-15`.
    static let kmrbRatingsSmall15 = Rswift.ImageResource(bundle: R.hostingBundle, name: "KMRB-Ratings-Small-15")
    /// Image `KMRB-Ratings-Small-18`.
    static let kmrbRatingsSmall18 = Rswift.ImageResource(bundle: R.hostingBundle, name: "KMRB-Ratings-Small-18")
    /// Image `KMRB-Ratings-Small-All`.
    static let kmrbRatingsSmallAll = Rswift.ImageResource(bundle: R.hostingBundle, name: "KMRB-Ratings-Small-All")
    /// Image `KMRB-Ratings-Small-Restricted Screening`.
    static let kmrbRatingsSmallRestrictedScreening = Rswift.ImageResource(bundle: R.hostingBundle, name: "KMRB-Ratings-Small-Restricted Screening")
    /// Image `KidsGradient`.
    static let kidsGradient = Rswift.ImageResource(bundle: R.hostingBundle, name: "KidsGradient")
    /// Image `LOLOMO_Gradient`.
    static let lolomo_Gradient = Rswift.ImageResource(bundle: R.hostingBundle, name: "LOLOMO_Gradient")
    /// Image `LineAppIcon`.
    static let lineAppIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "LineAppIcon")
    /// Image `MessagesAppIcon`.
    static let messagesAppIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "MessagesAppIcon")
    /// Image `MessengerAppIcon`.
    static let messengerAppIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "MessengerAppIcon")
    /// Image `MyListShortcut`.
    static let myListShortcut = Rswift.ImageResource(bundle: R.hostingBundle, name: "MyListShortcut")
    /// Image `NICAM-Advisories-discrimination`.
    static let nicamAdvisoriesDiscrimination = Rswift.ImageResource(bundle: R.hostingBundle, name: "NICAM-Advisories-discrimination")
    /// Image `NICAM-Advisories-drug-or-alcohol`.
    static let nicamAdvisoriesDrugOrAlcohol = Rswift.ImageResource(bundle: R.hostingBundle, name: "NICAM-Advisories-drug-or-alcohol")
    /// Image `NICAM-Advisories-fear-anxiety`.
    static let nicamAdvisoriesFearAnxiety = Rswift.ImageResource(bundle: R.hostingBundle, name: "NICAM-Advisories-fear-anxiety")
    /// Image `NICAM-Advisories-profanity`.
    static let nicamAdvisoriesProfanity = Rswift.ImageResource(bundle: R.hostingBundle, name: "NICAM-Advisories-profanity")
    /// Image `NICAM-Advisories-sex`.
    static let nicamAdvisoriesSex = Rswift.ImageResource(bundle: R.hostingBundle, name: "NICAM-Advisories-sex")
    /// Image `NICAM-Advisories-violence`.
    static let nicamAdvisoriesViolence = Rswift.ImageResource(bundle: R.hostingBundle, name: "NICAM-Advisories-violence")
    /// Image `NICAM-Ratings-12`.
    static let nicamRatings12 = Rswift.ImageResource(bundle: R.hostingBundle, name: "NICAM-Ratings-12")
    /// Image `NICAM-Ratings-14`.
    static let nicamRatings14 = Rswift.ImageResource(bundle: R.hostingBundle, name: "NICAM-Ratings-14")
    /// Image `NICAM-Ratings-16`.
    static let nicamRatings16 = Rswift.ImageResource(bundle: R.hostingBundle, name: "NICAM-Ratings-16")
    /// Image `NICAM-Ratings-18`.
    static let nicamRatings18 = Rswift.ImageResource(bundle: R.hostingBundle, name: "NICAM-Ratings-18")
    /// Image `NICAM-Ratings-6`.
    static let nicamRatings6 = Rswift.ImageResource(bundle: R.hostingBundle, name: "NICAM-Ratings-6")
    /// Image `NICAM-Ratings-9`.
    static let nicamRatings9 = Rswift.ImageResource(bundle: R.hostingBundle, name: "NICAM-Ratings-9")
    /// Image `NICAM-Ratings-AL`.
    static let nicamRatingsAL = Rswift.ImageResource(bundle: R.hostingBundle, name: "NICAM-Ratings-AL")
    /// Image `Person_Icon`.
    static let person_Icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "Person_Icon")
    /// Image `PlayIcon`.
    static let playIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "PlayIcon")
    /// Image `PlayShortcut`.
    static let playShortcut = Rswift.ImageResource(bundle: R.hostingBundle, name: "PlayShortcut")
    /// Image `SearchShortcut`.
    static let searchShortcut = Rswift.ImageResource(bundle: R.hostingBundle, name: "SearchShortcut")
    /// Image `SnapAppIcon`.
    static let snapAppIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "SnapAppIcon")
    /// Image `TVNetflix`.
    static let tvNetflix = Rswift.ImageResource(bundle: R.hostingBundle, name: "TVNetflix")
    /// Image `TVSuccess`.
    static let tvSuccess = Rswift.ImageResource(bundle: R.hostingBundle, name: "TVSuccess")
    /// Image `ThumbRatingFeatureImage`.
    static let thumbRatingFeatureImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "ThumbRatingFeatureImage")
    /// Image `Top_10_Supplemental_Badge`.
    static let top_10_Supplemental_Badge = Rswift.ImageResource(bundle: R.hostingBundle, name: "Top_10_Supplemental_Badge")
    /// Image `TrendingShortcut`.
    static let trendingShortcut = Rswift.ImageResource(bundle: R.hostingBundle, name: "TrendingShortcut")
    /// Image `TwitterAppIcon`.
    static let twitterAppIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "TwitterAppIcon")
    /// Image `WhatsAppIcon`.
    static let whatsAppIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "WhatsAppIcon")
    /// Image `WhiteBackChevron`.
    static let whiteBackChevron = Rswift.ImageResource(bundle: R.hostingBundle, name: "WhiteBackChevron")
    /// Image `account-highlighted`.
    static let accountHighlighted = Rswift.ImageResource(bundle: R.hostingBundle, name: "account-highlighted")
    /// Image `alert-triangle`.
    static let alertTriangle = Rswift.ImageResource(bundle: R.hostingBundle, name: "alert-triangle")
    /// Image `brightness-high`.
    static let brightnessHigh = Rswift.ImageResource(bundle: R.hostingBundle, name: "brightness-high")
    /// Image `brightness-low`.
    static let brightnessLow = Rswift.ImageResource(bundle: R.hostingBundle, name: "brightness-low")
    /// Image `brightness-medium`.
    static let brightnessMedium = Rswift.ImageResource(bundle: R.hostingBundle, name: "brightness-medium")
    /// Image `browse`.
    static let browse = Rswift.ImageResource(bundle: R.hostingBundle, name: "browse")
    /// Image `cast_off`.
    static let cast_off = Rswift.ImageResource(bundle: R.hostingBundle, name: "cast_off")
    /// Image `cast_on0`.
    static let cast_on0 = Rswift.ImageResource(bundle: R.hostingBundle, name: "cast_on0")
    /// Image `cast_on1`.
    static let cast_on1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "cast_on1")
    /// Image `cast_on2`.
    static let cast_on2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "cast_on2")
    /// Image `cast_on`.
    static let cast_on = Rswift.ImageResource(bundle: R.hostingBundle, name: "cast_on")
    /// Image `categories`.
    static let categories = Rswift.ImageResource(bundle: R.hostingBundle, name: "categories")
    /// Image `cf_checkmark`.
    static let cf_checkmark = Rswift.ImageResource(bundle: R.hostingBundle, name: "cf_checkmark")
    /// Image `cf_cry`.
    static let cf_cry = Rswift.ImageResource(bundle: R.hostingBundle, name: "cf_cry")
    /// Image `cf_emoji2`.
    static let cf_emoji2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "cf_emoji2")
    /// Image `cf_emoji`.
    static let cf_emoji = Rswift.ImageResource(bundle: R.hostingBundle, name: "cf_emoji")
    /// Image `cf_fastlaughs`.
    static let cf_fastlaughs = Rswift.ImageResource(bundle: R.hostingBundle, name: "cf_fastlaughs")
    /// Image `cf_heartfill`.
    static let cf_heartfill = Rswift.ImageResource(bundle: R.hostingBundle, name: "cf_heartfill")
    /// Image `cf_heartunfill`.
    static let cf_heartunfill = Rswift.ImageResource(bundle: R.hostingBundle, name: "cf_heartunfill")
    /// Image `cf_info`.
    static let cf_info = Rswift.ImageResource(bundle: R.hostingBundle, name: "cf_info")
    /// Image `cf_play`.
    static let cf_play = Rswift.ImageResource(bundle: R.hostingBundle, name: "cf_play")
    /// Image `cf_plus`.
    static let cf_plus = Rswift.ImageResource(bundle: R.hostingBundle, name: "cf_plus")
    /// Image `cf_shareplane`.
    static let cf_shareplane = Rswift.ImageResource(bundle: R.hostingBundle, name: "cf_shareplane")
    /// Image `check`.
    static let check = Rswift.ImageResource(bundle: R.hostingBundle, name: "check")
    /// Image `circle`.
    static let circle = Rswift.ImageResource(bundle: R.hostingBundle, name: "circle")
    /// Image `cling`.
    static let cling = Rswift.ImageResource(bundle: R.hostingBundle, name: "cling")
    /// Image `connectFail`.
    static let connectFail = Rswift.ImageResource(bundle: R.hostingBundle, name: "connectFail")
    /// Image `connectSuccess`.
    static let connectSuccess = Rswift.ImageResource(bundle: R.hostingBundle, name: "connectSuccess")
    /// Image `downloads-highlighted`.
    static let downloadsHighlighted = Rswift.ImageResource(bundle: R.hostingBundle, name: "downloads-highlighted")
    /// Image `downloads`.
    static let downloads = Rswift.ImageResource(bundle: R.hostingBundle, name: "downloads")
    /// Image `episodes`.
    static let episodes = Rswift.ImageResource(bundle: R.hostingBundle, name: "episodes")
    /// Image `extras-cards-icon`.
    static let extrasCardsIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "extras-cards-icon")
    /// Image `grey_dropdown_triangle`.
    static let grey_dropdown_triangle = Rswift.ImageResource(bundle: R.hostingBundle, name: "grey_dropdown_triangle")
    /// Image `home-highlighted`.
    static let homeHighlighted = Rswift.ImageResource(bundle: R.hostingBundle, name: "home-highlighted")
    /// Image `home`.
    static let home = Rswift.ImageResource(bundle: R.hostingBundle, name: "home")
    /// Image `icon-call`.
    static let iconCall = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-call")
    /// Image `icon-info`.
    static let iconInfo = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-info")
    /// Image `icon-recover-password`.
    static let iconRecoverPassword = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-recover-password")
    /// Image `icon-repeat`.
    static let iconRepeat = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-repeat")
    /// Image `icon_bell_18`.
    static let icon_bell_18 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_bell_18")
    /// Image `icon_chevron_down`.
    static let icon_chevron_down = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_chevron_down")
    /// Image `icon_chevron_left_24`.
    static let icon_chevron_left_24 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_chevron_left_24")
    /// Image `icon_chevron_right_24`.
    static let icon_chevron_right_24 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_chevron_right_24")
    /// Image `icon_close_18`.
    static let icon_close_18 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_close_18")
    /// Image `icon_close_24`.
    static let icon_close_24 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_close_24")
    /// Image `icon_collection`.
    static let icon_collection = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_collection")
    /// Image `icon_comingsoon`.
    static let icon_comingsoon = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_comingsoon")
    /// Image `icon_dislike_full`.
    static let icon_dislike_full = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_dislike_full")
    /// Image `icon_dislike`.
    static let icon_dislike = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_dislike")
    /// Image `icon_dropdown`.
    static let icon_dropdown = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_dropdown")
    /// Image `icon_edit`.
    static let icon_edit = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_edit")
    /// Image `icon_episodes_outline`.
    static let icon_episodes_outline = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_episodes_outline")
    /// Image `icon_fullscreen_off`.
    static let icon_fullscreen_off = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_fullscreen_off")
    /// Image `icon_fullscreen_on`.
    static let icon_fullscreen_on = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_fullscreen_on")
    /// Image `icon_info_18`.
    static let icon_info_18 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_info_18")
    /// Image `icon_info`.
    static let icon_info = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_info")
    /// Image `icon_like_full`.
    static let icon_like_full = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_like_full")
    /// Image `icon_like`.
    static let icon_like = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_like")
    /// Image `icon_more_menu`.
    static let icon_more_menu = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_more_menu")
    /// Image `icon_music_outline`.
    static let icon_music_outline = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_music_outline")
    /// Image `icon_music_solid`.
    static let icon_music_solid = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_music_solid")
    /// Image `icon_netflix_n`.
    static let icon_netflix_n = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_netflix_n")
    /// Image `icon_next_38`.
    static let icon_next_38 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_next_38")
    /// Image `icon_notifications_outline`.
    static let icon_notifications_outline = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_notifications_outline")
    /// Image `icon_notifications`.
    static let icon_notifications = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_notifications")
    /// Image `icon_pause`.
    static let icon_pause = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_pause")
    /// Image `icon_play_outline`.
    static let icon_play_outline = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_play_outline")
    /// Image `icon_play_solid`.
    static let icon_play_solid = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_play_solid")
    /// Image `icon_play`.
    static let icon_play = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_play")
    /// Image `icon_player_nextItem`.
    static let icon_player_nextItem = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_player_nextItem")
    /// Image `icon_player_priorItem`.
    static let icon_player_priorItem = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_player_priorItem")
    /// Image `icon_previous_24`.
    static let icon_previous_24 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_previous_24")
    /// Image `icon_previous_38`.
    static let icon_previous_38 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_previous_38")
    /// Image `icon_refresh_18`.
    static let icon_refresh_18 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_refresh_18")
    /// Image `icon_remove`.
    static let icon_remove = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_remove")
    /// Image `icon_settings_outline`.
    static let icon_settings_outline = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_settings_outline")
    /// Image `icon_settings_solid`.
    static let icon_settings_solid = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_settings_solid")
    /// Image `icon_share_18`.
    static let icon_share_18 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_share_18")
    /// Image `icon_share_arrow_24`.
    static let icon_share_arrow_24 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_share_arrow_24")
    /// Image `icon_share_plane_24`.
    static let icon_share_plane_24 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_share_plane_24")
    /// Image `icon_share_share_24`.
    static let icon_share_share_24 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_share_share_24")
    /// Image `icon_skipintro`.
    static let icon_skipintro = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_skipintro")
    /// Image `icon_volume0`.
    static let icon_volume0 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_volume0")
    /// Image `icon_volume1`.
    static let icon_volume1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_volume1")
    /// Image `icon_volume2`.
    static let icon_volume2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_volume2")
    /// Image `icon_volume3`.
    static let icon_volume3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_volume3")
    /// Image `icon_volume_high`.
    static let icon_volume_high = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_volume_high")
    /// Image `icon_volume_off`.
    static let icon_volume_off = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_volume_off")
    /// Image `icon_warning`.
    static let icon_warning = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_warning")
    /// Image `icon_whiteplaycircle_small`.
    static let icon_whiteplaycircle_small = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_whiteplaycircle_small")
    /// Image `kids-icon-ar`.
    static let kidsIconAr = Rswift.ImageResource(bundle: R.hostingBundle, name: "kids-icon-ar")
    /// Image `kids-icon-cs`.
    static let kidsIconCs = Rswift.ImageResource(bundle: R.hostingBundle, name: "kids-icon-cs")
    /// Image `kids-icon-da`.
    static let kidsIconDa = Rswift.ImageResource(bundle: R.hostingBundle, name: "kids-icon-da")
    /// Image `kids-icon-de`.
    static let kidsIconDe = Rswift.ImageResource(bundle: R.hostingBundle, name: "kids-icon-de")
    /// Image `kids-icon-el`.
    static let kidsIconEl = Rswift.ImageResource(bundle: R.hostingBundle, name: "kids-icon-el")
    /// Image `kids-icon-en-au`.
    static let kidsIconEnAu = Rswift.ImageResource(bundle: R.hostingBundle, name: "kids-icon-en-au")
    /// Image `kids-icon-en-gb`.
    static let kidsIconEnGb = Rswift.ImageResource(bundle: R.hostingBundle, name: "kids-icon-en-gb")
    /// Image `kids-icon-en-us`.
    static let kidsIconEnUs = Rswift.ImageResource(bundle: R.hostingBundle, name: "kids-icon-en-us")
    /// Image `kids-icon-es-ar`.
    static let kidsIconEsAr = Rswift.ImageResource(bundle: R.hostingBundle, name: "kids-icon-es-ar")
    /// Image `kids-icon-es-es`.
    static let kidsIconEsEs = Rswift.ImageResource(bundle: R.hostingBundle, name: "kids-icon-es-es")
    /// Image `kids-icon-es-mx`.
    static let kidsIconEsMx = Rswift.ImageResource(bundle: R.hostingBundle, name: "kids-icon-es-mx")
    /// Image `kids-icon-fi`.
    static let kidsIconFi = Rswift.ImageResource(bundle: R.hostingBundle, name: "kids-icon-fi")
    /// Image `kids-icon-fr-ca`.
    static let kidsIconFrCa = Rswift.ImageResource(bundle: R.hostingBundle, name: "kids-icon-fr-ca")
    /// Image `kids-icon-fr`.
    static let kidsIconFr = Rswift.ImageResource(bundle: R.hostingBundle, name: "kids-icon-fr")
    /// Image `kids-icon-he`.
    static let kidsIconHe = Rswift.ImageResource(bundle: R.hostingBundle, name: "kids-icon-he")
    /// Image `kids-icon-hu`.
    static let kidsIconHu = Rswift.ImageResource(bundle: R.hostingBundle, name: "kids-icon-hu")
    /// Image `kids-icon-it`.
    static let kidsIconIt = Rswift.ImageResource(bundle: R.hostingBundle, name: "kids-icon-it")
    /// Image `kids-icon-jp`.
    static let kidsIconJp = Rswift.ImageResource(bundle: R.hostingBundle, name: "kids-icon-jp")
    /// Image `kids-icon-ko`.
    static let kidsIconKo = Rswift.ImageResource(bundle: R.hostingBundle, name: "kids-icon-ko")
    /// Image `kids-icon-nl`.
    static let kidsIconNl = Rswift.ImageResource(bundle: R.hostingBundle, name: "kids-icon-nl")
    /// Image `kids-icon-no`.
    static let kidsIconNo = Rswift.ImageResource(bundle: R.hostingBundle, name: "kids-icon-no")
    /// Image `kids-icon-pl`.
    static let kidsIconPl = Rswift.ImageResource(bundle: R.hostingBundle, name: "kids-icon-pl")
    /// Image `kids-icon-pt-br`.
    static let kidsIconPtBr = Rswift.ImageResource(bundle: R.hostingBundle, name: "kids-icon-pt-br")
    /// Image `kids-icon-pt-pt`.
    static let kidsIconPtPt = Rswift.ImageResource(bundle: R.hostingBundle, name: "kids-icon-pt-pt")
    /// Image `kids-icon-ro`.
    static let kidsIconRo = Rswift.ImageResource(bundle: R.hostingBundle, name: "kids-icon-ro")
    /// Image `kids-icon-sv`.
    static let kidsIconSv = Rswift.ImageResource(bundle: R.hostingBundle, name: "kids-icon-sv")
    /// Image `kids-icon-sw`.
    static let kidsIconSw = Rswift.ImageResource(bundle: R.hostingBundle, name: "kids-icon-sw")
    /// Image `kids-icon-th`.
    static let kidsIconTh = Rswift.ImageResource(bundle: R.hostingBundle, name: "kids-icon-th")
    /// Image `kids-icon-tr`.
    static let kidsIconTr = Rswift.ImageResource(bundle: R.hostingBundle, name: "kids-icon-tr")
    /// Image `kids-icon-vi`.
    static let kidsIconVi = Rswift.ImageResource(bundle: R.hostingBundle, name: "kids-icon-vi")
    /// Image `kids-icon-zh-cn`.
    static let kidsIconZhCn = Rswift.ImageResource(bundle: R.hostingBundle, name: "kids-icon-zh-cn")
    /// Image `kids-icon-zh-tw`.
    static let kidsIconZhTw = Rswift.ImageResource(bundle: R.hostingBundle, name: "kids-icon-zh-tw")
    /// Image `loadGradient01`.
    static let loadGradient01 = Rswift.ImageResource(bundle: R.hostingBundle, name: "loadGradient01")
    /// Image `loadGradient02`.
    static let loadGradient02 = Rswift.ImageResource(bundle: R.hostingBundle, name: "loadGradient02")
    /// Image `loadGradient03`.
    static let loadGradient03 = Rswift.ImageResource(bundle: R.hostingBundle, name: "loadGradient03")
    /// Image `loadGradient04`.
    static let loadGradient04 = Rswift.ImageResource(bundle: R.hostingBundle, name: "loadGradient04")
    /// Image `loadGradient05`.
    static let loadGradient05 = Rswift.ImageResource(bundle: R.hostingBundle, name: "loadGradient05")
    /// Image `loadGradient06`.
    static let loadGradient06 = Rswift.ImageResource(bundle: R.hostingBundle, name: "loadGradient06")
    /// Image `lock_closed`.
    static let lock_closed = Rswift.ImageResource(bundle: R.hostingBundle, name: "lock_closed")
    /// Image `lock_open`.
    static let lock_open = Rswift.ImageResource(bundle: R.hostingBundle, name: "lock_open")
    /// Image `lockscreen-placeholder-full-logo`.
    static let lockscreenPlaceholderFullLogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "lockscreen-placeholder-full-logo")
    /// Image `mcfly-browse`.
    static let mcflyBrowse = Rswift.ImageResource(bundle: R.hostingBundle, name: "mcfly-browse")
    /// Image `mcfly-downloads`.
    static let mcflyDownloads = Rswift.ImageResource(bundle: R.hostingBundle, name: "mcfly-downloads")
    /// Image `mcfly-more`.
    static let mcflyMore = Rswift.ImageResource(bundle: R.hostingBundle, name: "mcfly-more")
    /// Image `mcfly-myprofile`.
    static let mcflyMyprofile = Rswift.ImageResource(bundle: R.hostingBundle, name: "mcfly-myprofile")
    /// Image `mcfly-search`.
    static let mcflySearch = Rswift.ImageResource(bundle: R.hostingBundle, name: "mcfly-search")
    /// Image `mdxSpinner`.
    static let mdxSpinner = Rswift.ImageResource(bundle: R.hostingBundle, name: "mdxSpinner")
    /// Image `mdxppgradient`.
    static let mdxppgradient = Rswift.ImageResource(bundle: R.hostingBundle, name: "mdxppgradient")
    /// Image `media_left`.
    static let media_left = Rswift.ImageResource(bundle: R.hostingBundle, name: "media_left")
    /// Image `media_next`.
    static let media_next = Rswift.ImageResource(bundle: R.hostingBundle, name: "media_next")
    /// Image `media_pause`.
    static let media_pause = Rswift.ImageResource(bundle: R.hostingBundle, name: "media_pause")
    /// Image `media_play`.
    static let media_play = Rswift.ImageResource(bundle: R.hostingBundle, name: "media_play")
    /// Image `media_prev`.
    static let media_prev = Rswift.ImageResource(bundle: R.hostingBundle, name: "media_prev")
    /// Image `media_right`.
    static let media_right = Rswift.ImageResource(bundle: R.hostingBundle, name: "media_right")
    /// Image `memberReferralColorIcon_Azure_Large`.
    static let memberReferralColorIcon_Azure_Large = Rswift.ImageResource(bundle: R.hostingBundle, name: "memberReferralColorIcon_Azure_Large")
    /// Image `memberReferralColorIcon_Azure_Small`.
    static let memberReferralColorIcon_Azure_Small = Rswift.ImageResource(bundle: R.hostingBundle, name: "memberReferralColorIcon_Azure_Small")
    /// Image `memberReferralColorIcon_Lime_Large`.
    static let memberReferralColorIcon_Lime_Large = Rswift.ImageResource(bundle: R.hostingBundle, name: "memberReferralColorIcon_Lime_Large")
    /// Image `memberReferralColorIcon_Lime_Small`.
    static let memberReferralColorIcon_Lime_Small = Rswift.ImageResource(bundle: R.hostingBundle, name: "memberReferralColorIcon_Lime_Small")
    /// Image `memberReferralColorIcon_Magenta_Large`.
    static let memberReferralColorIcon_Magenta_Large = Rswift.ImageResource(bundle: R.hostingBundle, name: "memberReferralColorIcon_Magenta_Large")
    /// Image `memberReferralColorIcon_Magenta_Small`.
    static let memberReferralColorIcon_Magenta_Small = Rswift.ImageResource(bundle: R.hostingBundle, name: "memberReferralColorIcon_Magenta_Small")
    /// Image `memberReferralColorIcon_Violet_Large`.
    static let memberReferralColorIcon_Violet_Large = Rswift.ImageResource(bundle: R.hostingBundle, name: "memberReferralColorIcon_Violet_Large")
    /// Image `memberReferralColorIcon_Violet_Small`.
    static let memberReferralColorIcon_Violet_Small = Rswift.ImageResource(bundle: R.hostingBundle, name: "memberReferralColorIcon_Violet_Small")
    /// Image `memberReferralGiftBoxSmall`.
    static let memberReferralGiftBoxSmall = Rswift.ImageResource(bundle: R.hostingBundle, name: "memberReferralGiftBoxSmall")
    /// Image `memberReferralPromoMessagingIconWhite_Large`.
    static let memberReferralPromoMessagingIconWhite_Large = Rswift.ImageResource(bundle: R.hostingBundle, name: "memberReferralPromoMessagingIconWhite_Large")
    /// Image `memberReferralShareNdo`.
    static let memberReferralShareNdo = Rswift.ImageResource(bundle: R.hostingBundle, name: "memberReferralShareNdo")
    /// Image `memberReferralTooltipTriangleDown`.
    static let memberReferralTooltipTriangleDown = Rswift.ImageResource(bundle: R.hostingBundle, name: "memberReferralTooltipTriangleDown")
    /// Image `memberReferralTooltipTriangleUp`.
    static let memberReferralTooltipTriangleUp = Rswift.ImageResource(bundle: R.hostingBundle, name: "memberReferralTooltipTriangleUp")
    /// Image `mute_off`.
    static let mute_off = Rswift.ImageResource(bundle: R.hostingBundle, name: "mute_off")
    /// Image `mute_on`.
    static let mute_on = Rswift.ImageResource(bundle: R.hostingBundle, name: "mute_on")
    /// Image `netflix_logotype`.
    static let netflix_logotype = Rswift.ImageResource(bundle: R.hostingBundle, name: "netflix_logotype")
    /// Image `new_chevron`.
    static let new_chevron = Rswift.ImageResource(bundle: R.hostingBundle, name: "new_chevron")
    /// Image `nextEpisode`.
    static let nextEpisode = Rswift.ImageResource(bundle: R.hostingBundle, name: "nextEpisode")
    /// Image `play_18`.
    static let play_18 = Rswift.ImageResource(bundle: R.hostingBundle, name: "play_18")
    /// Image `play_button_circle`.
    static let play_button_circle = Rswift.ImageResource(bundle: R.hostingBundle, name: "play_button_circle")
    /// Image `profile`.
    static let profile = Rswift.ImageResource(bundle: R.hostingBundle, name: "profile")
    /// Image `rightArrow`.
    static let rightArrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "rightArrow")
    /// Image `search-highlighted`.
    static let searchHighlighted = Rswift.ImageResource(bundle: R.hostingBundle, name: "search-highlighted")
    /// Image `search`.
    static let search = Rswift.ImageResource(bundle: R.hostingBundle, name: "search")
    /// Image `settings-account-empty`.
    static let settingsAccountEmpty = Rswift.ImageResource(bundle: R.hostingBundle, name: "settings-account-empty")
    /// Image `settings-bell`.
    static let settingsBell = Rswift.ImageResource(bundle: R.hostingBundle, name: "settings-bell")
    /// Image `settings-checkmark`.
    static let settingsCheckmark = Rswift.ImageResource(bundle: R.hostingBundle, name: "settings-checkmark")
    /// Image `settings-downloads-multi`.
    static let settingsDownloadsMulti = Rswift.ImageResource(bundle: R.hostingBundle, name: "settings-downloads-multi")
    /// Image `settings-element-chevron`.
    static let settingsElementChevron = Rswift.ImageResource(bundle: R.hostingBundle, name: "settings-element-chevron")
    /// Image `settings-element-edit`.
    static let settingsElementEdit = Rswift.ImageResource(bundle: R.hostingBundle, name: "settings-element-edit")
    /// Image `settings-element-exit`.
    static let settingsElementExit = Rswift.ImageResource(bundle: R.hostingBundle, name: "settings-element-exit")
    /// Image `settings-element-stack`.
    static let settingsElementStack = Rswift.ImageResource(bundle: R.hostingBundle, name: "settings-element-stack")
    /// Image `settings-gauge`.
    static let settingsGauge = Rswift.ImageResource(bundle: R.hostingBundle, name: "settings-gauge")
    /// Image `settings-help`.
    static let settingsHelp = Rswift.ImageResource(bundle: R.hostingBundle, name: "settings-help")
    /// Image `settings-network-cellular`.
    static let settingsNetworkCellular = Rswift.ImageResource(bundle: R.hostingBundle, name: "settings-network-cellular")
    /// Image `settings-network-wifi`.
    static let settingsNetworkWifi = Rswift.ImageResource(bundle: R.hostingBundle, name: "settings-network-wifi")
    /// Image `settings-page-folded`.
    static let settingsPageFolded = Rswift.ImageResource(bundle: R.hostingBundle, name: "settings-page-folded")
    /// Image `settings-person`.
    static let settingsPerson = Rswift.ImageResource(bundle: R.hostingBundle, name: "settings-person")
    /// Image `settings-plus`.
    static let settingsPlus = Rswift.ImageResource(bundle: R.hostingBundle, name: "settings-plus")
    /// Image `settings-settings`.
    static let settingsSettings = Rswift.ImageResource(bundle: R.hostingBundle, name: "settings-settings")
    /// Image `settings-trashcan`.
    static let settingsTrashcan = Rswift.ImageResource(bundle: R.hostingBundle, name: "settings-trashcan")
    /// Image `speedControl`.
    static let speedControl = Rswift.ImageResource(bundle: R.hostingBundle, name: "speedControl")
    /// Image `subtitlesAudio`.
    static let subtitlesAudio = Rswift.ImageResource(bundle: R.hostingBundle, name: "subtitlesAudio")
    /// Image `successBackground`.
    static let successBackground = Rswift.ImageResource(bundle: R.hostingBundle, name: "successBackground")
    /// Image `test_CDP_gradient`.
    static let test_CDP_gradient = Rswift.ImageResource(bundle: R.hostingBundle, name: "test_CDP_gradient")
    /// Image `tooltip_close`.
    static let tooltip_close = Rswift.ImageResource(bundle: R.hostingBundle, name: "tooltip_close")
    /// Image `visibility-off`.
    static let visibilityOff = Rswift.ImageResource(bundle: R.hostingBundle, name: "visibility-off")
    /// Image `voip_privacy`.
    static let voip_privacy = Rswift.ImageResource(bundle: R.hostingBundle, name: "voip_privacy")
    /// Image `voip_tou`.
    static let voip_tou = Rswift.ImageResource(bundle: R.hostingBundle, name: "voip_tou")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "AAAABVkM-ulGr_gThawtcVRuzwTKcDZKnQqA3NlNKcyUIIGbENO_21vbytddHkF2t7v3HvPYn61QGkMq6YylNBJYovucFZMu", bundle: ..., traitCollection: ...)`
    static func aaaabVkMUlGr_gThawtcVRuzwTKcDZKnQqA3NlNKcyUIIGbENO_21vbytddHkF2t7v3HvPYn61QGkMq6YylNBJYovucFZMu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.aaaabVkMUlGr_gThawtcVRuzwTKcDZKnQqA3NlNKcyUIIGbENO_21vbytddHkF2t7v3HvPYn61QGkMq6YylNBJYovucFZMu, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "AAAABWfkXOppl5bD4CtdvUI5rNwg4VILJSlg06QBE2poJywxTeN5WApCbWM8mvXGYmnsKXwQFeom8dCUb4hcMgLnKA5F0kd5_CNz6N0g64WKUwcGaxJ6Nu1pZg1g1OkEpg", bundle: ..., traitCollection: ...)`
    static func aaaabWfkXOppl5bD4CtdvUI5rNwg4VILJSlg06QBE2poJywxTeN5WApCbWM8mvXGYmnsKXwQFeom8dCUb4hcMgLnKA5F0kd5_CNz6N0g64WKUwcGaxJ6Nu1pZg1g1OkEpg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.aaaabWfkXOppl5bD4CtdvUI5rNwg4VILJSlg06QBE2poJywxTeN5WApCbWM8mvXGYmnsKXwQFeom8dCUb4hcMgLnKA5F0kd5_CNz6N0g64WKUwcGaxJ6Nu1pZg1g1OkEpg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "AAAABXgINpvuddWaUorT6s4uSzfsnk_5qjizdgB7ALcNfW1AT3r5kgNCbv_CC3WrhKpcTUBqUxKY-b7kABBS476VKOMdkVLYG316teeLrUna00-Qu0gWAkyWQ8CH0ovSOw", bundle: ..., traitCollection: ...)`
    static func aaaabXgINpvuddWaUorT6s4uSzfsnk_5qjizdgB7ALcNfW1AT3r5kgNCbv_CC3WrhKpcTUBqUxKYB7kABBS476VKOMdkVLYG316teeLrUna00Qu0gWAkyWQ8CH0ovSOw(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.aaaabXgINpvuddWaUorT6s4uSzfsnk_5qjizdgB7ALcNfW1AT3r5kgNCbv_CC3WrhKpcTUBqUxKYB7kABBS476VKOMdkVLYG316teeLrUna00Qu0gWAkyWQ8CH0ovSOw, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "AAAABXi4g4FuCHyaTncsQIHZxhLHiKDmvexTAJs1bQOyyUqZ0tL8dcL219f5CNazn0QRIfScRyM1OUqiVKa_dpJeET9j4PR-NJ11dao5-ja3Wz4fMl7emJEpTTgEVXS-9g", bundle: ..., traitCollection: ...)`
    static func aaaabXi4g4FuCHyaTncsQIHZxhLHiKDmvexTAJs1bQOyyUqZ0tL8dcL219f5CNazn0QRIfScRyM1OUqiVKa_dpJeET9j4PRNJ11dao5Ja3Wz4fMl7emJEpTTgEVXS9g(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.aaaabXi4g4FuCHyaTncsQIHZxhLHiKDmvexTAJs1bQOyyUqZ0tL8dcL219f5CNazn0QRIfScRyM1OUqiVKa_dpJeET9j4PRNJ11dao5Ja3Wz4fMl7emJEpTTgEVXS9g, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "AAAABYxYBWK_PYKLGtS5UzGIZoR3ZH5eFM1eRVozbok7fzltsAnZVAubb9y9kYisSA8-K9uyvn-FXUTer7JIo7psgeRexPh1xKTMBNnEIIWDHEABMT7wLkgE6Ez5RzUYFA-1", bundle: ..., traitCollection: ...)`
    static func aaaabYxYBWK_PYKLGtS5UzGIZoR3ZH5eFM1eRVozbok7fzltsAnZVAubb9y9kYisSA8K9uyvnFXUTer7JIo7psgeRexPh1xKTMBNnEIIWDHEABMT7wLkgE6Ez5RzUYFA1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.aaaabYxYBWK_PYKLGtS5UzGIZoR3ZH5eFM1eRVozbok7fzltsAnZVAubb9y9kYisSA8K9uyvnFXUTer7JIo7psgeRexPh1xKTMBNnEIIWDHEABMT7wLkgE6Ez5RzUYFA1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "BLM_icon", bundle: ..., traitCollection: ...)`
    static func blm_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.blm_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "BR-Ratings-10", bundle: ..., traitCollection: ...)`
    static func brRatings10(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.brRatings10, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "BR-Ratings-12", bundle: ..., traitCollection: ...)`
    static func brRatings12(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.brRatings12, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "BR-Ratings-14", bundle: ..., traitCollection: ...)`
    static func brRatings14(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.brRatings14, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "BR-Ratings-16", bundle: ..., traitCollection: ...)`
    static func brRatings16(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.brRatings16, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "BR-Ratings-18", bundle: ..., traitCollection: ...)`
    static func brRatings18(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.brRatings18, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "BR-Ratings-L", bundle: ..., traitCollection: ...)`
    static func brRatingsL(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.brRatingsL, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "CDPBackground", bundle: ..., traitCollection: ...)`
    static func cdpBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cdpBackground, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "CDPBackground_blue", bundle: ..., traitCollection: ...)`
    static func cdpBackground_blue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cdpBackground_blue, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "CDPBackground_green", bundle: ..., traitCollection: ...)`
    static func cdpBackground_green(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cdpBackground_green, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "CDPBackground_orange", bundle: ..., traitCollection: ...)`
    static func cdpBackground_orange(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cdpBackground_orange, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "CDPBackground_purple", bundle: ..., traitCollection: ...)`
    static func cdpBackground_purple(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cdpBackground_purple, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "CDPBackground_yellow", bundle: ..., traitCollection: ...)`
    static func cdpBackground_yellow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cdpBackground_yellow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Check_Icon", bundle: ..., traitCollection: ...)`
    static func check_Icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.check_Icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "CopyLinkIcon", bundle: ..., traitCollection: ...)`
    static func copyLinkIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.copyLinkIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "CornerGradientLeft", bundle: ..., traitCollection: ...)`
    static func cornerGradientLeft(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cornerGradientLeft, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "CornerGradientRight", bundle: ..., traitCollection: ...)`
    static func cornerGradientRight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cornerGradientRight, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "DP-backgroundp-gradient", bundle: ..., traitCollection: ...)`
    static func dpBackgroundpGradient(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dpBackgroundpGradient, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "DefaultBoxShot", bundle: ..., traitCollection: ...)`
    static func defaultBoxShot(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.defaultBoxShot, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Dolby Vision", bundle: ..., traitCollection: ...)`
    static func dolbyVision(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dolbyVision, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "FacebookAppIcon", bundle: ..., traitCollection: ...)`
    static func facebookAppIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.facebookAppIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Follow_Icon", bundle: ..., traitCollection: ...)`
    static func follow_Icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.follow_Icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "GB-Ratings-12", bundle: ..., traitCollection: ...)`
    static func gbRatings12(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gbRatings12, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "GB-Ratings-12A", bundle: ..., traitCollection: ...)`
    static func gbRatings12A(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gbRatings12A, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "GB-Ratings-15", bundle: ..., traitCollection: ...)`
    static func gbRatings15(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gbRatings15, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "GB-Ratings-18", bundle: ..., traitCollection: ...)`
    static func gbRatings18(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gbRatings18, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "GB-Ratings-AV", bundle: ..., traitCollection: ...)`
    static func gbRatingsAV(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gbRatingsAV, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "GB-Ratings-PG", bundle: ..., traitCollection: ...)`
    static func gbRatingsPG(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gbRatingsPG, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "GB-Ratings-R18", bundle: ..., traitCollection: ...)`
    static func gbRatingsR18(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gbRatingsR18, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "GB-Ratings-U", bundle: ..., traitCollection: ...)`
    static func gbRatingsU(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gbRatingsU, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "GB-Ratings-Uc", bundle: ..., traitCollection: ...)`
    static func gbRatingsUc(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gbRatingsUc, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "HD", bundle: ..., traitCollection: ...)`
    static func hD(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hD, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "HDR", bundle: ..., traitCollection: ...)`
    static func hdR(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hdR, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Header_Gradient", bundle: ..., traitCollection: ...)`
    static func header_Gradient(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.header_Gradient, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "HeroGradient", bundle: ..., traitCollection: ...)`
    static func heroGradient(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.heroGradient, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "HideKeyboard", bundle: ..., traitCollection: ...)`
    static func hideKeyboard(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hideKeyboard, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "InstagramAppIcon", bundle: ..., traitCollection: ...)`
    static func instagramAppIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.instagramAppIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "KMRB-Advisories-drugs", bundle: ..., traitCollection: ...)`
    static func kmrbAdvisoriesDrugs(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.kmrbAdvisoriesDrugs, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "KMRB-Advisories-fear", bundle: ..., traitCollection: ...)`
    static func kmrbAdvisoriesFear(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.kmrbAdvisoriesFear, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "KMRB-Advisories-harmful-themes", bundle: ..., traitCollection: ...)`
    static func kmrbAdvisoriesHarmfulThemes(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.kmrbAdvisoriesHarmfulThemes, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "KMRB-Advisories-imitable-behaviors", bundle: ..., traitCollection: ...)`
    static func kmrbAdvisoriesImitableBehaviors(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.kmrbAdvisoriesImitableBehaviors, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "KMRB-Advisories-lewdness", bundle: ..., traitCollection: ...)`
    static func kmrbAdvisoriesLewdness(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.kmrbAdvisoriesLewdness, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "KMRB-Advisories-profanity", bundle: ..., traitCollection: ...)`
    static func kmrbAdvisoriesProfanity(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.kmrbAdvisoriesProfanity, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "KMRB-Advisories-violence", bundle: ..., traitCollection: ...)`
    static func kmrbAdvisoriesViolence(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.kmrbAdvisoriesViolence, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "KMRB-Ratings-Big-12", bundle: ..., traitCollection: ...)`
    static func kmrbRatingsBig12(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.kmrbRatingsBig12, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "KMRB-Ratings-Big-15", bundle: ..., traitCollection: ...)`
    static func kmrbRatingsBig15(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.kmrbRatingsBig15, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "KMRB-Ratings-Big-18", bundle: ..., traitCollection: ...)`
    static func kmrbRatingsBig18(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.kmrbRatingsBig18, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "KMRB-Ratings-Big-All", bundle: ..., traitCollection: ...)`
    static func kmrbRatingsBigAll(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.kmrbRatingsBigAll, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "KMRB-Ratings-Big-Restricted Screening", bundle: ..., traitCollection: ...)`
    static func kmrbRatingsBigRestrictedScreening(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.kmrbRatingsBigRestrictedScreening, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "KMRB-Ratings-Small-12", bundle: ..., traitCollection: ...)`
    static func kmrbRatingsSmall12(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.kmrbRatingsSmall12, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "KMRB-Ratings-Small-15", bundle: ..., traitCollection: ...)`
    static func kmrbRatingsSmall15(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.kmrbRatingsSmall15, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "KMRB-Ratings-Small-18", bundle: ..., traitCollection: ...)`
    static func kmrbRatingsSmall18(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.kmrbRatingsSmall18, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "KMRB-Ratings-Small-All", bundle: ..., traitCollection: ...)`
    static func kmrbRatingsSmallAll(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.kmrbRatingsSmallAll, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "KMRB-Ratings-Small-Restricted Screening", bundle: ..., traitCollection: ...)`
    static func kmrbRatingsSmallRestrictedScreening(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.kmrbRatingsSmallRestrictedScreening, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "KidsGradient", bundle: ..., traitCollection: ...)`
    static func kidsGradient(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.kidsGradient, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "LOLOMO_Gradient", bundle: ..., traitCollection: ...)`
    static func lolomo_Gradient(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lolomo_Gradient, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "LineAppIcon", bundle: ..., traitCollection: ...)`
    static func lineAppIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lineAppIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "MessagesAppIcon", bundle: ..., traitCollection: ...)`
    static func messagesAppIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.messagesAppIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "MessengerAppIcon", bundle: ..., traitCollection: ...)`
    static func messengerAppIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.messengerAppIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "MyListShortcut", bundle: ..., traitCollection: ...)`
    static func myListShortcut(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.myListShortcut, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "NICAM-Advisories-discrimination", bundle: ..., traitCollection: ...)`
    static func nicamAdvisoriesDiscrimination(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.nicamAdvisoriesDiscrimination, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "NICAM-Advisories-drug-or-alcohol", bundle: ..., traitCollection: ...)`
    static func nicamAdvisoriesDrugOrAlcohol(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.nicamAdvisoriesDrugOrAlcohol, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "NICAM-Advisories-fear-anxiety", bundle: ..., traitCollection: ...)`
    static func nicamAdvisoriesFearAnxiety(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.nicamAdvisoriesFearAnxiety, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "NICAM-Advisories-profanity", bundle: ..., traitCollection: ...)`
    static func nicamAdvisoriesProfanity(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.nicamAdvisoriesProfanity, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "NICAM-Advisories-sex", bundle: ..., traitCollection: ...)`
    static func nicamAdvisoriesSex(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.nicamAdvisoriesSex, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "NICAM-Advisories-violence", bundle: ..., traitCollection: ...)`
    static func nicamAdvisoriesViolence(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.nicamAdvisoriesViolence, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "NICAM-Ratings-12", bundle: ..., traitCollection: ...)`
    static func nicamRatings12(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.nicamRatings12, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "NICAM-Ratings-14", bundle: ..., traitCollection: ...)`
    static func nicamRatings14(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.nicamRatings14, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "NICAM-Ratings-16", bundle: ..., traitCollection: ...)`
    static func nicamRatings16(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.nicamRatings16, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "NICAM-Ratings-18", bundle: ..., traitCollection: ...)`
    static func nicamRatings18(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.nicamRatings18, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "NICAM-Ratings-6", bundle: ..., traitCollection: ...)`
    static func nicamRatings6(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.nicamRatings6, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "NICAM-Ratings-9", bundle: ..., traitCollection: ...)`
    static func nicamRatings9(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.nicamRatings9, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "NICAM-Ratings-AL", bundle: ..., traitCollection: ...)`
    static func nicamRatingsAL(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.nicamRatingsAL, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Person_Icon", bundle: ..., traitCollection: ...)`
    static func person_Icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.person_Icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "PlayIcon", bundle: ..., traitCollection: ...)`
    static func playIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.playIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "PlayShortcut", bundle: ..., traitCollection: ...)`
    static func playShortcut(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.playShortcut, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "SearchShortcut", bundle: ..., traitCollection: ...)`
    static func searchShortcut(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.searchShortcut, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "SnapAppIcon", bundle: ..., traitCollection: ...)`
    static func snapAppIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.snapAppIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "TVNetflix", bundle: ..., traitCollection: ...)`
    static func tvNetflix(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tvNetflix, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "TVSuccess", bundle: ..., traitCollection: ...)`
    static func tvSuccess(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tvSuccess, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ThumbRatingFeatureImage", bundle: ..., traitCollection: ...)`
    static func thumbRatingFeatureImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.thumbRatingFeatureImage, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Top_10_Supplemental_Badge", bundle: ..., traitCollection: ...)`
    static func top_10_Supplemental_Badge(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.top_10_Supplemental_Badge, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "TrendingShortcut", bundle: ..., traitCollection: ...)`
    static func trendingShortcut(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.trendingShortcut, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "TwitterAppIcon", bundle: ..., traitCollection: ...)`
    static func twitterAppIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.twitterAppIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "WhatsAppIcon", bundle: ..., traitCollection: ...)`
    static func whatsAppIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.whatsAppIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "WhiteBackChevron", bundle: ..., traitCollection: ...)`
    static func whiteBackChevron(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.whiteBackChevron, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "account-highlighted", bundle: ..., traitCollection: ...)`
    static func accountHighlighted(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.accountHighlighted, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "alert-triangle", bundle: ..., traitCollection: ...)`
    static func alertTriangle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.alertTriangle, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "brightness-high", bundle: ..., traitCollection: ...)`
    static func brightnessHigh(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.brightnessHigh, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "brightness-low", bundle: ..., traitCollection: ...)`
    static func brightnessLow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.brightnessLow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "brightness-medium", bundle: ..., traitCollection: ...)`
    static func brightnessMedium(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.brightnessMedium, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "browse", bundle: ..., traitCollection: ...)`
    static func browse(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.browse, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cast_off", bundle: ..., traitCollection: ...)`
    static func cast_off(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cast_off, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cast_on", bundle: ..., traitCollection: ...)`
    static func cast_on(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cast_on, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cast_on0", bundle: ..., traitCollection: ...)`
    static func cast_on0(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cast_on0, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cast_on1", bundle: ..., traitCollection: ...)`
    static func cast_on1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cast_on1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cast_on2", bundle: ..., traitCollection: ...)`
    static func cast_on2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cast_on2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "categories", bundle: ..., traitCollection: ...)`
    static func categories(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.categories, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cf_checkmark", bundle: ..., traitCollection: ...)`
    static func cf_checkmark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cf_checkmark, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cf_cry", bundle: ..., traitCollection: ...)`
    static func cf_cry(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cf_cry, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cf_emoji", bundle: ..., traitCollection: ...)`
    static func cf_emoji(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cf_emoji, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cf_emoji2", bundle: ..., traitCollection: ...)`
    static func cf_emoji2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cf_emoji2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cf_fastlaughs", bundle: ..., traitCollection: ...)`
    static func cf_fastlaughs(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cf_fastlaughs, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cf_heartfill", bundle: ..., traitCollection: ...)`
    static func cf_heartfill(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cf_heartfill, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cf_heartunfill", bundle: ..., traitCollection: ...)`
    static func cf_heartunfill(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cf_heartunfill, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cf_info", bundle: ..., traitCollection: ...)`
    static func cf_info(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cf_info, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cf_play", bundle: ..., traitCollection: ...)`
    static func cf_play(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cf_play, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cf_plus", bundle: ..., traitCollection: ...)`
    static func cf_plus(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cf_plus, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cf_shareplane", bundle: ..., traitCollection: ...)`
    static func cf_shareplane(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cf_shareplane, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "check", bundle: ..., traitCollection: ...)`
    static func check(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.check, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "circle", bundle: ..., traitCollection: ...)`
    static func circle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.circle, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cling", bundle: ..., traitCollection: ...)`
    static func cling(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cling, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "connectFail", bundle: ..., traitCollection: ...)`
    static func connectFail(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.connectFail, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "connectSuccess", bundle: ..., traitCollection: ...)`
    static func connectSuccess(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.connectSuccess, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "downloads", bundle: ..., traitCollection: ...)`
    static func downloads(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.downloads, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "downloads-highlighted", bundle: ..., traitCollection: ...)`
    static func downloadsHighlighted(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.downloadsHighlighted, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "episodes", bundle: ..., traitCollection: ...)`
    static func episodes(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.episodes, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "extras-cards-icon", bundle: ..., traitCollection: ...)`
    static func extrasCardsIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.extrasCardsIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "grey_dropdown_triangle", bundle: ..., traitCollection: ...)`
    static func grey_dropdown_triangle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.grey_dropdown_triangle, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home", bundle: ..., traitCollection: ...)`
    static func home(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home-highlighted", bundle: ..., traitCollection: ...)`
    static func homeHighlighted(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.homeHighlighted, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon-call", bundle: ..., traitCollection: ...)`
    static func iconCall(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconCall, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon-info", bundle: ..., traitCollection: ...)`
    static func iconInfo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconInfo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon-recover-password", bundle: ..., traitCollection: ...)`
    static func iconRecoverPassword(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconRecoverPassword, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon-repeat", bundle: ..., traitCollection: ...)`
    static func iconRepeat(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconRepeat, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_bell_18", bundle: ..., traitCollection: ...)`
    static func icon_bell_18(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_bell_18, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_chevron_down", bundle: ..., traitCollection: ...)`
    static func icon_chevron_down(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_chevron_down, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_chevron_left_24", bundle: ..., traitCollection: ...)`
    static func icon_chevron_left_24(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_chevron_left_24, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_chevron_right_24", bundle: ..., traitCollection: ...)`
    static func icon_chevron_right_24(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_chevron_right_24, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_close_18", bundle: ..., traitCollection: ...)`
    static func icon_close_18(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_close_18, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_close_24", bundle: ..., traitCollection: ...)`
    static func icon_close_24(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_close_24, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_collection", bundle: ..., traitCollection: ...)`
    static func icon_collection(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_collection, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_comingsoon", bundle: ..., traitCollection: ...)`
    static func icon_comingsoon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_comingsoon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_dislike", bundle: ..., traitCollection: ...)`
    static func icon_dislike(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_dislike, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_dislike_full", bundle: ..., traitCollection: ...)`
    static func icon_dislike_full(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_dislike_full, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_dropdown", bundle: ..., traitCollection: ...)`
    static func icon_dropdown(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_dropdown, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_edit", bundle: ..., traitCollection: ...)`
    static func icon_edit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_edit, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_episodes_outline", bundle: ..., traitCollection: ...)`
    static func icon_episodes_outline(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_episodes_outline, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_fullscreen_off", bundle: ..., traitCollection: ...)`
    static func icon_fullscreen_off(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_fullscreen_off, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_fullscreen_on", bundle: ..., traitCollection: ...)`
    static func icon_fullscreen_on(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_fullscreen_on, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_info", bundle: ..., traitCollection: ...)`
    static func icon_info(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_info, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_info_18", bundle: ..., traitCollection: ...)`
    static func icon_info_18(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_info_18, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_like", bundle: ..., traitCollection: ...)`
    static func icon_like(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_like, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_like_full", bundle: ..., traitCollection: ...)`
    static func icon_like_full(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_like_full, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_more_menu", bundle: ..., traitCollection: ...)`
    static func icon_more_menu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_more_menu, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_music_outline", bundle: ..., traitCollection: ...)`
    static func icon_music_outline(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_music_outline, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_music_solid", bundle: ..., traitCollection: ...)`
    static func icon_music_solid(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_music_solid, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_netflix_n", bundle: ..., traitCollection: ...)`
    static func icon_netflix_n(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_netflix_n, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_next_38", bundle: ..., traitCollection: ...)`
    static func icon_next_38(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_next_38, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_notifications", bundle: ..., traitCollection: ...)`
    static func icon_notifications(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_notifications, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_notifications_outline", bundle: ..., traitCollection: ...)`
    static func icon_notifications_outline(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_notifications_outline, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_pause", bundle: ..., traitCollection: ...)`
    static func icon_pause(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_pause, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_play", bundle: ..., traitCollection: ...)`
    static func icon_play(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_play, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_play_outline", bundle: ..., traitCollection: ...)`
    static func icon_play_outline(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_play_outline, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_play_solid", bundle: ..., traitCollection: ...)`
    static func icon_play_solid(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_play_solid, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_player_nextItem", bundle: ..., traitCollection: ...)`
    static func icon_player_nextItem(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_player_nextItem, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_player_priorItem", bundle: ..., traitCollection: ...)`
    static func icon_player_priorItem(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_player_priorItem, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_previous_24", bundle: ..., traitCollection: ...)`
    static func icon_previous_24(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_previous_24, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_previous_38", bundle: ..., traitCollection: ...)`
    static func icon_previous_38(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_previous_38, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_refresh_18", bundle: ..., traitCollection: ...)`
    static func icon_refresh_18(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_refresh_18, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_remove", bundle: ..., traitCollection: ...)`
    static func icon_remove(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_remove, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_settings_outline", bundle: ..., traitCollection: ...)`
    static func icon_settings_outline(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_settings_outline, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_settings_solid", bundle: ..., traitCollection: ...)`
    static func icon_settings_solid(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_settings_solid, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_share_18", bundle: ..., traitCollection: ...)`
    static func icon_share_18(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_share_18, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_share_arrow_24", bundle: ..., traitCollection: ...)`
    static func icon_share_arrow_24(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_share_arrow_24, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_share_plane_24", bundle: ..., traitCollection: ...)`
    static func icon_share_plane_24(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_share_plane_24, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_share_share_24", bundle: ..., traitCollection: ...)`
    static func icon_share_share_24(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_share_share_24, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_skipintro", bundle: ..., traitCollection: ...)`
    static func icon_skipintro(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_skipintro, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_volume0", bundle: ..., traitCollection: ...)`
    static func icon_volume0(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_volume0, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_volume1", bundle: ..., traitCollection: ...)`
    static func icon_volume1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_volume1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_volume2", bundle: ..., traitCollection: ...)`
    static func icon_volume2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_volume2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_volume3", bundle: ..., traitCollection: ...)`
    static func icon_volume3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_volume3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_volume_high", bundle: ..., traitCollection: ...)`
    static func icon_volume_high(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_volume_high, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_volume_off", bundle: ..., traitCollection: ...)`
    static func icon_volume_off(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_volume_off, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_warning", bundle: ..., traitCollection: ...)`
    static func icon_warning(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_warning, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_whiteplaycircle_small", bundle: ..., traitCollection: ...)`
    static func icon_whiteplaycircle_small(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_whiteplaycircle_small, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "kids-icon-ar", bundle: ..., traitCollection: ...)`
    static func kidsIconAr(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.kidsIconAr, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "kids-icon-cs", bundle: ..., traitCollection: ...)`
    static func kidsIconCs(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.kidsIconCs, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "kids-icon-da", bundle: ..., traitCollection: ...)`
    static func kidsIconDa(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.kidsIconDa, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "kids-icon-de", bundle: ..., traitCollection: ...)`
    static func kidsIconDe(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.kidsIconDe, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "kids-icon-el", bundle: ..., traitCollection: ...)`
    static func kidsIconEl(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.kidsIconEl, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "kids-icon-en-au", bundle: ..., traitCollection: ...)`
    static func kidsIconEnAu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.kidsIconEnAu, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "kids-icon-en-gb", bundle: ..., traitCollection: ...)`
    static func kidsIconEnGb(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.kidsIconEnGb, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "kids-icon-en-us", bundle: ..., traitCollection: ...)`
    static func kidsIconEnUs(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.kidsIconEnUs, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "kids-icon-es-ar", bundle: ..., traitCollection: ...)`
    static func kidsIconEsAr(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.kidsIconEsAr, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "kids-icon-es-es", bundle: ..., traitCollection: ...)`
    static func kidsIconEsEs(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.kidsIconEsEs, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "kids-icon-es-mx", bundle: ..., traitCollection: ...)`
    static func kidsIconEsMx(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.kidsIconEsMx, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "kids-icon-fi", bundle: ..., traitCollection: ...)`
    static func kidsIconFi(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.kidsIconFi, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "kids-icon-fr", bundle: ..., traitCollection: ...)`
    static func kidsIconFr(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.kidsIconFr, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "kids-icon-fr-ca", bundle: ..., traitCollection: ...)`
    static func kidsIconFrCa(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.kidsIconFrCa, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "kids-icon-he", bundle: ..., traitCollection: ...)`
    static func kidsIconHe(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.kidsIconHe, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "kids-icon-hu", bundle: ..., traitCollection: ...)`
    static func kidsIconHu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.kidsIconHu, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "kids-icon-it", bundle: ..., traitCollection: ...)`
    static func kidsIconIt(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.kidsIconIt, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "kids-icon-jp", bundle: ..., traitCollection: ...)`
    static func kidsIconJp(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.kidsIconJp, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "kids-icon-ko", bundle: ..., traitCollection: ...)`
    static func kidsIconKo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.kidsIconKo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "kids-icon-nl", bundle: ..., traitCollection: ...)`
    static func kidsIconNl(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.kidsIconNl, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "kids-icon-no", bundle: ..., traitCollection: ...)`
    static func kidsIconNo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.kidsIconNo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "kids-icon-pl", bundle: ..., traitCollection: ...)`
    static func kidsIconPl(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.kidsIconPl, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "kids-icon-pt-br", bundle: ..., traitCollection: ...)`
    static func kidsIconPtBr(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.kidsIconPtBr, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "kids-icon-pt-pt", bundle: ..., traitCollection: ...)`
    static func kidsIconPtPt(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.kidsIconPtPt, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "kids-icon-ro", bundle: ..., traitCollection: ...)`
    static func kidsIconRo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.kidsIconRo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "kids-icon-sv", bundle: ..., traitCollection: ...)`
    static func kidsIconSv(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.kidsIconSv, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "kids-icon-sw", bundle: ..., traitCollection: ...)`
    static func kidsIconSw(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.kidsIconSw, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "kids-icon-th", bundle: ..., traitCollection: ...)`
    static func kidsIconTh(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.kidsIconTh, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "kids-icon-tr", bundle: ..., traitCollection: ...)`
    static func kidsIconTr(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.kidsIconTr, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "kids-icon-vi", bundle: ..., traitCollection: ...)`
    static func kidsIconVi(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.kidsIconVi, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "kids-icon-zh-cn", bundle: ..., traitCollection: ...)`
    static func kidsIconZhCn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.kidsIconZhCn, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "kids-icon-zh-tw", bundle: ..., traitCollection: ...)`
    static func kidsIconZhTw(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.kidsIconZhTw, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "loadGradient01", bundle: ..., traitCollection: ...)`
    static func loadGradient01(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.loadGradient01, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "loadGradient02", bundle: ..., traitCollection: ...)`
    static func loadGradient02(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.loadGradient02, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "loadGradient03", bundle: ..., traitCollection: ...)`
    static func loadGradient03(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.loadGradient03, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "loadGradient04", bundle: ..., traitCollection: ...)`
    static func loadGradient04(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.loadGradient04, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "loadGradient05", bundle: ..., traitCollection: ...)`
    static func loadGradient05(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.loadGradient05, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "loadGradient06", bundle: ..., traitCollection: ...)`
    static func loadGradient06(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.loadGradient06, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "lock_closed", bundle: ..., traitCollection: ...)`
    static func lock_closed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lock_closed, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "lock_open", bundle: ..., traitCollection: ...)`
    static func lock_open(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lock_open, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "lockscreen-placeholder-full-logo", bundle: ..., traitCollection: ...)`
    static func lockscreenPlaceholderFullLogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lockscreenPlaceholderFullLogo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mcfly-browse", bundle: ..., traitCollection: ...)`
    static func mcflyBrowse(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mcflyBrowse, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mcfly-downloads", bundle: ..., traitCollection: ...)`
    static func mcflyDownloads(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mcflyDownloads, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mcfly-more", bundle: ..., traitCollection: ...)`
    static func mcflyMore(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mcflyMore, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mcfly-myprofile", bundle: ..., traitCollection: ...)`
    static func mcflyMyprofile(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mcflyMyprofile, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mcfly-search", bundle: ..., traitCollection: ...)`
    static func mcflySearch(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mcflySearch, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mdxSpinner", bundle: ..., traitCollection: ...)`
    static func mdxSpinner(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mdxSpinner, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mdxppgradient", bundle: ..., traitCollection: ...)`
    static func mdxppgradient(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mdxppgradient, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "media_left", bundle: ..., traitCollection: ...)`
    static func media_left(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.media_left, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "media_next", bundle: ..., traitCollection: ...)`
    static func media_next(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.media_next, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "media_pause", bundle: ..., traitCollection: ...)`
    static func media_pause(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.media_pause, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "media_play", bundle: ..., traitCollection: ...)`
    static func media_play(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.media_play, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "media_prev", bundle: ..., traitCollection: ...)`
    static func media_prev(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.media_prev, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "media_right", bundle: ..., traitCollection: ...)`
    static func media_right(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.media_right, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "memberReferralColorIcon_Azure_Large", bundle: ..., traitCollection: ...)`
    static func memberReferralColorIcon_Azure_Large(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.memberReferralColorIcon_Azure_Large, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "memberReferralColorIcon_Azure_Small", bundle: ..., traitCollection: ...)`
    static func memberReferralColorIcon_Azure_Small(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.memberReferralColorIcon_Azure_Small, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "memberReferralColorIcon_Lime_Large", bundle: ..., traitCollection: ...)`
    static func memberReferralColorIcon_Lime_Large(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.memberReferralColorIcon_Lime_Large, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "memberReferralColorIcon_Lime_Small", bundle: ..., traitCollection: ...)`
    static func memberReferralColorIcon_Lime_Small(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.memberReferralColorIcon_Lime_Small, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "memberReferralColorIcon_Magenta_Large", bundle: ..., traitCollection: ...)`
    static func memberReferralColorIcon_Magenta_Large(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.memberReferralColorIcon_Magenta_Large, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "memberReferralColorIcon_Magenta_Small", bundle: ..., traitCollection: ...)`
    static func memberReferralColorIcon_Magenta_Small(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.memberReferralColorIcon_Magenta_Small, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "memberReferralColorIcon_Violet_Large", bundle: ..., traitCollection: ...)`
    static func memberReferralColorIcon_Violet_Large(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.memberReferralColorIcon_Violet_Large, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "memberReferralColorIcon_Violet_Small", bundle: ..., traitCollection: ...)`
    static func memberReferralColorIcon_Violet_Small(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.memberReferralColorIcon_Violet_Small, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "memberReferralGiftBoxSmall", bundle: ..., traitCollection: ...)`
    static func memberReferralGiftBoxSmall(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.memberReferralGiftBoxSmall, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "memberReferralPromoMessagingIconWhite_Large", bundle: ..., traitCollection: ...)`
    static func memberReferralPromoMessagingIconWhite_Large(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.memberReferralPromoMessagingIconWhite_Large, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "memberReferralShareNdo", bundle: ..., traitCollection: ...)`
    static func memberReferralShareNdo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.memberReferralShareNdo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "memberReferralTooltipTriangleDown", bundle: ..., traitCollection: ...)`
    static func memberReferralTooltipTriangleDown(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.memberReferralTooltipTriangleDown, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "memberReferralTooltipTriangleUp", bundle: ..., traitCollection: ...)`
    static func memberReferralTooltipTriangleUp(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.memberReferralTooltipTriangleUp, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mute_off", bundle: ..., traitCollection: ...)`
    static func mute_off(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mute_off, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mute_on", bundle: ..., traitCollection: ...)`
    static func mute_on(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mute_on, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "netflix_logotype", bundle: ..., traitCollection: ...)`
    static func netflix_logotype(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.netflix_logotype, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "new_chevron", bundle: ..., traitCollection: ...)`
    static func new_chevron(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.new_chevron, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "nextEpisode", bundle: ..., traitCollection: ...)`
    static func nextEpisode(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.nextEpisode, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "play_18", bundle: ..., traitCollection: ...)`
    static func play_18(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.play_18, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "play_button_circle", bundle: ..., traitCollection: ...)`
    static func play_button_circle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.play_button_circle, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "profile", bundle: ..., traitCollection: ...)`
    static func profile(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profile, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "rightArrow", bundle: ..., traitCollection: ...)`
    static func rightArrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rightArrow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "search", bundle: ..., traitCollection: ...)`
    static func search(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.search, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "search-highlighted", bundle: ..., traitCollection: ...)`
    static func searchHighlighted(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.searchHighlighted, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "settings-account-empty", bundle: ..., traitCollection: ...)`
    static func settingsAccountEmpty(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settingsAccountEmpty, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "settings-bell", bundle: ..., traitCollection: ...)`
    static func settingsBell(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settingsBell, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "settings-checkmark", bundle: ..., traitCollection: ...)`
    static func settingsCheckmark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settingsCheckmark, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "settings-downloads-multi", bundle: ..., traitCollection: ...)`
    static func settingsDownloadsMulti(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settingsDownloadsMulti, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "settings-element-chevron", bundle: ..., traitCollection: ...)`
    static func settingsElementChevron(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settingsElementChevron, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "settings-element-edit", bundle: ..., traitCollection: ...)`
    static func settingsElementEdit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settingsElementEdit, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "settings-element-exit", bundle: ..., traitCollection: ...)`
    static func settingsElementExit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settingsElementExit, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "settings-element-stack", bundle: ..., traitCollection: ...)`
    static func settingsElementStack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settingsElementStack, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "settings-gauge", bundle: ..., traitCollection: ...)`
    static func settingsGauge(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settingsGauge, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "settings-help", bundle: ..., traitCollection: ...)`
    static func settingsHelp(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settingsHelp, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "settings-network-cellular", bundle: ..., traitCollection: ...)`
    static func settingsNetworkCellular(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settingsNetworkCellular, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "settings-network-wifi", bundle: ..., traitCollection: ...)`
    static func settingsNetworkWifi(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settingsNetworkWifi, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "settings-page-folded", bundle: ..., traitCollection: ...)`
    static func settingsPageFolded(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settingsPageFolded, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "settings-person", bundle: ..., traitCollection: ...)`
    static func settingsPerson(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settingsPerson, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "settings-plus", bundle: ..., traitCollection: ...)`
    static func settingsPlus(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settingsPlus, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "settings-settings", bundle: ..., traitCollection: ...)`
    static func settingsSettings(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settingsSettings, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "settings-trashcan", bundle: ..., traitCollection: ...)`
    static func settingsTrashcan(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settingsTrashcan, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "speedControl", bundle: ..., traitCollection: ...)`
    static func speedControl(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.speedControl, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "subtitlesAudio", bundle: ..., traitCollection: ...)`
    static func subtitlesAudio(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.subtitlesAudio, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "successBackground", bundle: ..., traitCollection: ...)`
    static func successBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.successBackground, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "test_CDP_gradient", bundle: ..., traitCollection: ...)`
    static func test_CDP_gradient(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.test_CDP_gradient, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tooltip_close", bundle: ..., traitCollection: ...)`
    static func tooltip_close(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tooltip_close, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "visibility-off", bundle: ..., traitCollection: ...)`
    static func visibilityOff(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.visibilityOff, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "voip_privacy", bundle: ..., traitCollection: ...)`
    static func voip_privacy(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.voip_privacy, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "voip_tou", bundle: ..., traitCollection: ...)`
    static func voip_tou(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.voip_tou, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    struct uiApplicationSceneManifest {
      static let _key = "UIApplicationSceneManifest"
      static let uiApplicationSupportsMultipleScenes = true

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      // There are no resources to validate
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R {
  fileprivate init() {}
}
